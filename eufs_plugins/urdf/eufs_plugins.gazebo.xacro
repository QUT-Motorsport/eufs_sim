<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <xacro:arg name="publish_tf" default="false"/>
  <xacro:arg name="sim_perception" default="true"/>
  <xacro:arg name="sim_slam" default="true"/>
  <xacro:arg name="command_mode" default="velocity"/>
  <xacro:arg name="pub_ground_truth" default="true"/>

  <!-- Custom plugin which controls the car using a given vehicle model.
   It controls the car by setting its velocity and position
   and the steering angle of the wheels -->
  <gazebo>
    <plugin name="race_car" filename="libgazebo_ros_race_car.so">
      <update_rate>1000.0</update_rate>
      <publish_rate>200.0</publish_rate>
      <front_left_wheel_steering>left_steering_hinge_joint</front_left_wheel_steering>
      <front_right_wheel_steering>right_steering_hinge_joint</front_right_wheel_steering>
      <front_left_wheel>front_left_wheel_joint</front_left_wheel>
      <front_right_wheel>front_right_wheel_joint</front_right_wheel>
      <rear_left_wheel>rear_left_wheel_joint</rear_left_wheel>
      <rear_right_wheel>rear_right_wheel_joint</rear_right_wheel>
      <referenceFrame>track</referenceFrame>
      <robotFrame>base_footprint</robotFrame>
      <controlDelay>0.035</controlDelay>
      <steeringLockTime>1.5</steeringLockTime>
      <pubGroundTruth>$(arg pub_ground_truth)</pubGroundTruth>
      <publishTransform>$(arg publish_tf)</publishTransform>
      <commandMode>$(arg command_mode)</commandMode>
      <yaml_config>$(arg config_file)</yaml_config>
      <noise_config>$(arg noise_config)</noise_config>
      <vehicle_model>$(arg vehicle_model)</vehicle_model>
      <simulateSLAM>$(arg sim_slam)</simulateSLAM>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin name="cone_detection" filename="libgazebo_ros_cone_detection.so">
      <updateRate>20.0</updateRate>
      <cameraDetectionTopic>vision/cone_detection</cameraDetectionTopic>
      <cameraFrameId>base_footprint</cameraFrameId>
      <cameraMinViewDistance>1</cameraMinViewDistance>
      <cameraMaxViewDistance>10</cameraMaxViewDistance>
      <cameraFOV>1.91986</cameraFOV><!--110 degrees-->
      <cameraRangeNoise>0.01</cameraRangeNoise>
      <cameraBearingNoise>0.00872665</cameraBearingNoise><!--0.5 degree-->
      <cameraGaussianRangeNoise>false</cameraGaussianRangeNoise>
      <cameraGaussianBearingNoise>true</cameraGaussianBearingNoise>
      <cameraDetectsColour>true</cameraDetectsColour>
      <lidarDetectionTopic>lidar/cone_detection</lidarDetectionTopic>
      <lidarFrameId>velodyne</lidarFrameId>
      <lidarMinViewDistance>1</lidarMinViewDistance>
      <lidarMaxViewDistance>10</lidarMaxViewDistance>
      <lidarFOV>3.141593</lidarFOV><!-- 180 degrees-->
      <lidarRangeNoise>0.01</lidarRangeNoise>
      <lidarBearingNoise>0.001</lidarBearingNoise><!--0.06 degree-->
      <lidarGaussianRangeNoise>true</lidarGaussianRangeNoise>
      <lidarGaussianBearingNoise>true</lidarGaussianBearingNoise>
      <lidarDetectsColour>false</lidarDetectsColour>
      <SLAMFrameId>track</SLAMFrameId>
      <SLAMXNoise>0.1</SLAMXNoise>
      <SLAMYNoise>0.1</SLAMYNoise>
      <SLAMLocalFrameId>base_footprint</SLAMLocalFrameId>
      <SLAMLocalRangeX>20</SLAMLocalRangeX>
      <SLAMLocalRangeY>10</SLAMLocalRangeY>
      <publishGroundTruth>$(arg pub_ground_truth)</publishGroundTruth>
      <simulatePerception>$(arg sim_perception)</simulatePerception>
      <simulateSLAM>$(arg sim_slam)</simulateSLAM>
    </plugin>
  </gazebo>
</robot>
